---

---
<h1>Test de cunostinte</h1>

<form id="quizForm">
  <!-- Render the quiz questions -->
  <div id="quizQuestions" ></div>

  <button type="submit"  class=" text-white rounded px-3 bg-green-500">Verifica</button><h1 id="score_system" class="invisible"></h1>
</form>
<h1>Rezultate: </h1>
<div id="results" class="grid grid-rows-4 grid-flow-col gap-4 div mt-4"></div>
<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
  import {
    getAuth,
    signInWithEmailAndPassword,
    onAuthStateChanged,
  } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
  import {
    getFirestore,
    collection,
    addDoc,
    doc
  } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js";
  // Your web app's Firebase configuration
  const firebaseConfig = {
    apiKey: "AIzaSyBqlsV51OOQvOMrLMJM2sEt_gDO4PEO1eo",

    authDomain: "geogr-1272f.firebaseapp.com",

    projectId: "geogr-1272f",

    storageBucket: "geogr-1272f.appspot.com",

    messagingSenderId: "688841716716",

    appId: "1:688841716716:web:1db3822961cbf5628c86c9",

    measurementId: "G-2NKM0324H1",
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getFirestore(app);

  const quizQuestions = [
{
question: "Care este capitala României?",
options: ["București", "Cluj-Napoca", "Timișoara", "Iași"],
answer: "București",
},
{
question: "Care este cel mai lung râu din România?",
options: ["Dunărea", "Mureșul", "Oltul", "Siretul"],
answer: "Dunărea",
},
{
question: "Care este cel mai înalt vârf montan din România?",
options: ["Vârful Moldoveanu", "Vârful Negoiu", "Vârful Parângu Mare", "Vârful Cucurbăta Mare"],
answer: "Vârful Moldoveanu",
},
{
question: "Care este cel mai mare lac natural din România?",
options: ["Lacul Razelm", "Lacul Sfânta Ana", "Lacul Techirghiol", "Lacul Bicaz"],
answer: "Lacul Sfânta Ana",
},
{
question: "Care dintre următoarele orașe este situat în zona de est a României?",
options: ["Constanța", "Arad", "Timișoara", "Iași"],
answer: "Iași",
},
{
question: "Care este cel mai mare parc național din România?",
options: ["Parcul Național Retezat", "Parcul Național Bucegi", "Parcul Național Cozia", "Parcul Național Călimani"],
answer: "Parcul Național Retezat",
},
{
question: "Care dintre următoarele orașe este situat în zona de vest a României?",
options: ["Constanța", "Arad", "Brașov", "Suceava"],
answer: "Arad",
},
{
question: "Care este cel mai mare port fluvial din România?",
options: ["Portul Galați", "Portul Constanța", "Portul Tulcea", "Portul Brăila"],
answer: "Portul Galați",
},
{
question: "Care este cel mai mare oraș din Transilvania?",
options: ["Cluj-Napoca", "Brașov", "Sibiu", "Oradea"],
answer: "Cluj-Napoca",
},
{
question: "În ce regiune a României se găsește Delta Dunării?",
options: ["Muntenia", "Oltenia", "Transilvania", "Dobrogea"],
answer: "Dobrogea",
},
];

  // Function to render the quiz questions
  function renderQuizQuestions() {
    const quizForm = document.getElementById("quizForm");
    const quizQuestionsDiv = document.getElementById("quizQuestions");

    quizQuestions.forEach((question, index) => {
      const questionDiv = document.createElement("div");
      questionDiv.classList.add("bg-white", "p-4", "rounded-lg", "mb-4");

      const questionText = document.createElement("p");
      questionText.textContent = question.question;
      questionText.classList.add("font-medium", "mb-2", 'text-green-700', 'text-bold', 'fontWeight-700');
      questionDiv.appendChild(questionText);

      question.options.forEach((option) => {
        const label = document.createElement("label");
        label.classList.add("flex", "items-center", "space-x-2");

        const optionInput = document.createElement("input");
        optionInput.type = "radio";
        optionInput.name = `question${index}`;
        optionInput.value = option;
        optionInput.required = true;
        optionInput.classList.add("form-radio");
        label.appendChild(optionInput);

        const optionText = document.createTextNode(option);
        label.appendChild(optionText);

        questionDiv.appendChild(label);
      });

      quizQuestionsDiv.appendChild(questionDiv);
    });
  }

  // Function to handle the quiz submission
  async function submitQuiz(event) {
    event.preventDefault();

    let score = 0;

    quizQuestions.forEach((question, index) => {
      const selectedOption = document.querySelector(
        `input[name=question${index}]:checked`
      );
      if (selectedOption && selectedOption.value === question.answer) {
        score++;
      }
    });
    let userId = null;
    const ah = new Date();

    onAuthStateChanged(auth, async (user) => {
      if (user) {
        userId = user.uid;
        console.log("User ID:", userId);
        let r = (Math.random() + 1).toString(36).substring(7);
        try {
          const quizResultsRef = collection(db, `${user.uid}`);
          await addDoc(quizResultsRef, {
            userId: userId,
            result: score,
            timestamp: new Date(),
          });

          console.log("Quiz result saved with ID:");
        } catch (error) {
          console.error("Error saving quiz result:", error);
        }
      } else {
        // User is not authenticated
        userId = null;
        console.log("User not authenticated");
      }
    });
    // Save the result in Firebase Firestore

    // Display the score to the user
    console.log(`Your score: ${score}/${quizQuestions.length}`);
    document.getElementById("score_system").innerHTML = `Scor : ${score}/${quizQuestions.length}`
    document.getElementById("score_system").classList.remove("invisible");
  }

  // Render the quiz questions when the page loads
  window.addEventListener("DOMContentLoaded", renderQuizQuestions);

  // Add event listener to the form submit event
  const quizForm = document.getElementById("quizForm");
  quizForm.addEventListener("submit", submitQuiz);
</script>
<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
  import {
    getAuth,
    signInWithEmailAndPassword,
    onAuthStateChanged,
  } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
  import {
    getFirestore,
    collection,
    addDoc,
    getDocs,
    doc,
    getDoc,
  } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js";
  // Your web app's Firebase configuration
  const firebaseConfig = {
    apiKey: "AIzaSyBqlsV51OOQvOMrLMJM2sEt_gDO4PEO1eo",

    authDomain: "geogr-1272f.firebaseapp.com",

    projectId: "geogr-1272f",

    storageBucket: "geogr-1272f.appspot.com",

    messagingSenderId: "688841716716",

    appId: "1:688841716716:web:1db3822961cbf5628c86c9",

    measurementId: "G-2NKM0324H1",
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getFirestore(app);


  // Usage example
  // Ensure the user is authenticated

  onAuthStateChanged(auth, async (user) => {
    if (user) {
// Assuming you have already initialized Firestore and authenticated the user

try {
const querySnapshot = await getDocs(collection(db, user.uid));
const resultsDiv = document.getElementById('results'); // Assuming you have a div with id "results"

querySnapshot.forEach((doc) => {
const docId = doc.id;
const docData = doc.data();

// Create a new card element
const card = document.createElement('div');
card.className = 'bg-white rounded-lg shadow p-4 mb-4';

// Create a title element for the document ID
const title = document.createElement('h2');
title.className = 'text-xl font-bold mb-2';
 const date = new Date(new Date(docData['timestamp']['nanoseconds']));
const day = date.getDate().toString().padStart(2, '0');
const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based
const year = date.getFullYear().toString();

const formattedDate = `${day}/${month}/${year}`;

title.textContent = formattedDate




// Create a score element for the document data
const score = document.createElement('p');
score.className = 'text-lg';
score.textContent = 'Scor: ' + docData.result;

// Append the title and score elements to the card
card.appendChild(title);
card.appendChild(score);

// Append the card to the results div
resultsDiv.appendChild(card);

// You can also access other document data if needed
console.log(docId, ' => ', docData);
});


} catch (error) {
console.error('Error retrieving quiz result:', error);
}

    } else {
      console.log("User not authenticated");
      

    }
  });
</script>